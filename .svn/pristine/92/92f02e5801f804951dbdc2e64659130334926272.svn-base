package com.epam.lab.developers.game.map.unit;

import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class UnitStatus {

	private double codeMultiplier;// множник для швидкості написання коду,
									// напряму залежить від настрою ситості і
									// життя
	private double mood; // настрій юніта, якщо ситість і здоровя нормальні
	private double reputation; // ситість юніта, залежить від кількості випитої
								// кави і спожитої їжі
	private double health; // здоров'я, змінюється коли бються

	public static final String HANGRY = "Hangry";

	public static final String CODE_MULTIPLIER = "CODE_MULTIPLIER";
	public static final String MOOD = "MOOD";
	public static final String REPUTATION = "REPUTATION";
	public static final String HEALTH = "HEALTH";

	private Map<String, Effect> effects = new HashMap<String, Effect>();

	public UnitStatus() {
		this.reputation = 0;
		this.health = 100;
		this.mood = 100;
		this.codeMultiplier = 1;

	}

	public void randomEffects() {

		if (effects.get(HANGRY) != null) {
			if (effects.get(HANGRY).getBonus(HEALTH) < 100)
				effects.get(HANGRY).addBonus(HEALTH,
						effects.get(HANGRY).getBonus(HEALTH) + 2);

		} else
			addEffect(HANGRY, new Effect(Effect.INFINITY).addBonus(HEALTH, 0.1));

	}

	public UnitStatus(double codeMultiplie, double mood, double bellyful,
			double healt) {
		this.reputation = bellyful;
		this.health = healt;
		this.codeMultiplier = codeMultiplie;
		this.mood = mood;
	}

	public void addEffect(String name, Effect buff) {

		effects.put(name, buff);

	}

	public Map<String, Effect> getEffects() {

		for (String name : this.effects.keySet())
			checkTimeNoEnd(name);
		return effects;
	}

	private boolean checkTimeNoEnd(String name) {
		Date time = new Date();
		if (effects.containsKey(name)) {
			if (effects.get(name).getStart().getTime()
					+ effects.get(name).getTimeToEnd() - time.getTime() <= 0) {
				effects.remove(name);
				System.out.println(name);
				return false;
			}
			return true;
		} else
			return false;

	}

	public Effect getEffect(String name) {

		return effects.get(name);

	}

	public double getCodeMultiplier() {
		double tmpCodeMultiplier = 1;
		for (String name : this.effects.keySet()) {
			if (checkTimeNoEnd(name)) {
				Effect effect = effects.get(name);
				if (null != effect) {
					Double bonus = effect.getBonus(CODE_MULTIPLIER);
					if (null != bonus) {
						tmpCodeMultiplier += bonus;
						System.out.println("++++++++++++++++" + bonus);
					}
				}
			}
		}
		return codeMultiplier * tmpCodeMultiplier;
	}

	public void setCodeMultiplier(double codeMultiplier) {
		this.codeMultiplier = codeMultiplier;
	}

	public double getMood() {
		return mood;
	}

	public void setMood(double mood) {
		this.mood = mood;
	}

	public double getFood() {
		return reputation;
	}

	public void setFood(double food) {
		this.reputation = food;
	}

	public double getHealth() {
		return health;
	}

	public void setHealth(double health) {
		this.health = health;
	}

}
