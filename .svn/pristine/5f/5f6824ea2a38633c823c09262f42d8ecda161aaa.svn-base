package com.epam.lab.developers.game.map.unit;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.epam.lab.developers.game.Active;
import com.epam.lab.developers.game.map.GameMap;
import com.epam.lab.developers.game.map.algorithm_way.Step;
import com.epam.lab.developers.game.map.object.active.ActiveObject;
import com.epam.lab.developers.game.map.object.active.CoffeeMashine;
import com.epam.lab.developers.game.map.object.active.Notebook;
import com.epam.lab.developers.game.map.object.active.Printer;
import com.epam.lab.developers.game.map.object.active.Server;

public abstract class Unit implements Active {

	protected int id;
	protected int x;
	protected int y;
	protected int rotationAngle;
	protected List<String> textures = new ArrayList<>();
	protected String name;
	protected transient Map<Class<? extends ActiveObject>, Set<String>> availableMethods = new HashMap<Class<? extends ActiveObject>, Set<String>>();
	protected transient UnitTask task = new UnitTask("none");
	protected transient UnitStatus unitStatus;
	protected int codeLines;
	

	protected int i=0;

	public Unit() {
		// TODO Auto-generated constructor stub
	}

	public Unit(int id, int x, int y, int rotationAngle, List<String> textures,
			String name) {

		this.id = id;

		// // TODO заглушка
		this.x = x * 50 + 25;
		this.y = y * 50 + 25;
		// //
		this.rotationAngle = rotationAngle;
		this.textures = textures;
		this.name = name;
		
		this.unitStatus= new UnitStatus();
		
		HashSet<String> tmp = new HashSet<String>();
		tmp.add("use");
		tmp.add("repair");
		tmp.add("breakDown");
		availableMethods.put(CoffeeMashine.class, tmp);

		tmp = new HashSet<String>();
		tmp.add("use");
		tmp.add("repair");
		tmp.add("breakDown");
		availableMethods.put(Printer.class, tmp);

		tmp = new HashSet<String>();
		tmp.add("use");
		tmp.add("repair");
		tmp.add("breakDown");
		availableMethods.put(Server.class, tmp);

		tmp = new HashSet<String>();
		tmp.add("code");
		availableMethods.put(Notebook.class, tmp);
	}

	@Override
	public void action() {
		// availableMethods.put("", value)		
		
		
		
		if (task.getWay().size() > 0)
			this.move(task.getWay());
		else
			switch (task.getTask()) {
			case "move":
				LinkedList<Step> way = new LinkedList<Step>();
				//TODO : FrameWidth & height;
				way.add(new Step( this.task.getTarget().getI()*50+25 , this.task.getTarget().getJ()*50+25));
				
				task.setTask("Stop");
				this.move(way);
				break;
			case "code":
				this.code();
				break;
			case "use":
				this.use();
				System.out.println(this.unitStatus.getCodeMultiplier());
				break;
			case "repair":
				this.repair();
				break;
			case "breakDown":
				this.breakDown();
				break;
			}

	}

	public UnitTask getTask() {
		return task;
	}

	public void setTask(UnitTask task) {
		this.task = task;
	}

	private void breakDown() {
		
		// TODO Auto-generated method stub

	}

	private void repair() {
		
		// TODO Auto-generated method stub
	}

	private void use() {
		// TODO Auto-generated method stub
		if(((ActiveObject)this.task.getTarget()).use(this)>=100)
			this.task.setTask("Stop");
	}

	
	public int getCodeLines() {
		return codeLines;
	}

	private void code() {
		// TODO Auto-generated method stub

//		((CoffeeMashine) task.getTarget()).action();

	}

	public Set<String> getAvailableMethods(
			Class<? extends ActiveObject> activeObject) {
		return availableMethods.get(activeObject);
	}

	public void move(LinkedList<Step> way) {
		Step step = way.pollLast();
		if (null != step) {
			this.x = step.getX();
			this.y = step.getY();
		}
	}

	public UnitStatus getUnitStatus() {
		return unitStatus;
	}

	public void setUnitStatus(UnitStatus unitStatus) {
		this.unitStatus = unitStatus;
	}

	public List<String> getTextures() {
		return textures;
	}

	public int getX() {
		return x;
	}

	protected void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	protected void setY(int y) {
		this.y = y;
	}

	public int getRotationAngle() {
		return rotationAngle;
	}

	protected void setRotationAngle(int rotationAngle) {
		this.rotationAngle = rotationAngle;
	}

	public String getName() {
		return name;
	}

	public int getId() {
		return id;
	}

}
