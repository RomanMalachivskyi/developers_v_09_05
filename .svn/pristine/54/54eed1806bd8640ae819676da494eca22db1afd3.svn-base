package com.epam.lab.developers.game.map.algorithm_way;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.epam.lab.developers.servlet.Register;

public class WaveAlgorithm {
	private int [][] map;
	private int xA, yA, xB, yB;
	private List<Step> way = new ArrayList<>();;
	static final Logger logger = Logger.getLogger(WaveAlgorithm.class);
	
	public WaveAlgorithm() {
		this.map = map;
		this.xA = xA;
		this.xB = xB;
		this.yA = yA;
		this.yB = yB;
	}
	
	public String Algorithm (){
		//way = new ArrayList<>();
		int n = 8;//висота
		int k = 9; //довжина
		int l;//кількість кроків
		int x,y;
		int[][] mapM =new int[n][k];
		
		if(map[xA][yA]!=1 || map[xB][yB] !=1){
			mapM[xA][yA]=1;
			l=1;
			do{
				l+=1;
				for(int i=0;i<n;++i){
					for(int j=0;j<k;++j){
						if(mapM[i][j]==l-1){
							if(j<k-1){
								if(map[i][j+1]==0 && mapM[i][j+1]==0)mapM[i][j+1]=l;
							}
							if(j>0){
								if(map[i][j-1]==0 && mapM[i][j-1]==0)mapM[i][j-1]=l;
							}
							if(i<n-1){
								if(map[i+1][j]==0 && mapM[i+1][j]==0)mapM[i+1][j]=l;
							}
							if(i>0){
								if(map[i-1][j]==0 && mapM[i-1][j]==0)mapM[i-1][j]=l;
							}
						}
					}
				}
				if(l>n*k){
					logger.debug("way doesn't exist"+xA+yA+"point of destination:"+xB +yB);
					return "way doesn't exist";
				}
			}
			while(mapM[xB][yB]==0);
		}else {
			logger.debug("wrong to point of destination:"+xB +yB);
			return "wrong to point of destination";
		}
		l=l-1;
		x=xB;
		y=yB;
		do{
			way.add(new Step(x, y));
			if(x < n-1){ 
				if(mapM[x][y] - mapM[x + 1][ y] == 1) {
					x=x+1;
					continue;
				}
			}
			
			if(x > 0){
				if(mapM[x][y] - mapM[x - 1][ y] == 1){ 
					x=x-1;
					continue;
				}
			}
			if(y < k-1){
				if(mapM[x][y] - mapM[x][y + 1] == 1){ 
					y=y+1;
					continue;
				}
			}
			if(y > 0){
				if(mapM[x][y] - mapM[x][y - 1] == 1){ 
					y=y-1;
					continue;
				}
			}
			l-=1;
		}while(y!=yA || x!=xA  );
		for(int i=0;i<n;++i){
			for(int j=0;j<k;++j){
				System.out.print(mapM[i][j]+" ");
			}
			System.out.println("\n");
		}
		System.out.println(way.toString());
		//System.out.println(mapM);
		return "zip file";
	}

}
