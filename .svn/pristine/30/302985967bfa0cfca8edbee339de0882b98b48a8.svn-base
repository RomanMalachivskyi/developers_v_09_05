package com.epam.lab.developers.game.map.object.active;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.epam.lab.developers.game.Active;
import com.epam.lab.developers.game.Usable;
import com.epam.lab.developers.game.map.object.MapObject;
import com.epam.lab.developers.game.map.unit.Buff;
import com.epam.lab.developers.game.map.unit.JuniorDeveloper;
import com.epam.lab.developers.game.map.unit.MiddleDeveloper;
import com.epam.lab.developers.game.map.unit.SeniorDeveloper;
import com.epam.lab.developers.game.map.unit.Unit;
import com.epam.lab.developers.game.map.unit.UnitStatus;

public abstract class ActiveObject extends MapObject implements	Active, Usable {
	

	private ObjectStatus status =new ObjectStatus();
	protected Set<String> tmp;
	protected Unit activeUnit;
	protected float processPercentage=0;
	protected transient Map<String , Buff> effects=new HashMap<String , Buff>(); 
	public static final String BREACKDOWN = "BREACKDOWN";
	
	protected transient Map<Class<? extends Unit>,Set<String>> availableMethods=new HashMap<Class<? extends Unit>, Set<String>>();
	

	public ActiveObject(int x, int y, int rotationAngle, String path) {
		super(x, y, rotationAngle, path);
		// TODO Auto-generated constructor stub	
			tmp= new HashSet<String>();
			tmp.add("use"); tmp.add("repair");tmp.add("breakDown");
		availableMethods.put(JuniorDeveloper.class,tmp);
		availableMethods.put(MiddleDeveloper.class,tmp);			
		availableMethods.put(SeniorDeveloper.class,tmp);		
		
	}

	public void use(){
		processPercentage+=10;
	
	}
	
	public Set<String> getAvailableMethods(Unit unit) {
		if (availableMethods.containsKey(unit.getClass()))			
			return availableMethods.get(unit.getClass());
		else return new HashSet<String>();
	}
	
	
	
	@Override
	public float use(Unit unit) {

		if(unitChecking(unit))
			switch (unit.getTask().getTask()){
			
			case "use"		 :   this.use();
				break;
				
			case "repair"		 :   this.repair();
				break;
				
			case "breakDown"		 :   this.breakDown();
				break;
			
			default : System.err.println("unknown method");
	
				}
		
		return processPercentage;
		
	
	}
	
	
	
	protected boolean unitChecking(Unit unit){
		if (this.activeUnit != unit) {
			processPercentage=0;
			this.activeUnit=unit;
		}		
		return unit!=null;
	}
	
	

	public float getProcessPercentage() {
		return processPercentage;
	}

	public void setProcessPercentage(float percentage) {
		this.processPercentage = percentage>100&&percentage<0 ? 0 : percentage;
	}
	
	
	@Override
	public void action() {

		
	}

	private void breakDown() {
		// TODO Auto-generated method stub
		
		
//		Effect buff = activeUnit.getUnitStatus().getEffect(BUFF);
		
		if(effects.get(BREACKDOWN)!=null){
			if (effects.get(BREACKDOWN).getBonus("repair") < 100)
				effects.put(BREACKDOWN, new Buff(99999999).addBonus("repair", effects.get(BREACKDOWN).getBonus("repair")+5) );
		} else			
			effects.put(BREACKDOWN, (new Buff(99999999).addBonus("repair", 5.)));

		System.out.println(effects.get(BREACKDOWN).getBonus("repair"));
//		super.use();
		
//		this.effects.put("Broken", new Effect(99999999).addBonus("breakDown", new Double(100)));
		
	}


	private void repair() {
		// TODO Auto-generated method stub
		
	}

}
