package com.epam.lab.developers.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.epam.lab.developers.data.DataHolder;
import com.epam.lab.developers.data.LoginData;
import com.epam.lab.developers.entity.User;
import com.epam.lab.developers.game.Game;
import com.epam.lab.developers.game.map.GameMap;
import com.epam.lab.developers.game.map.algorithm_way.Step;
import com.epam.lab.developers.game.map.algorithm_way.WaveAlgorithm;
import com.epam.lab.developers.game.map.object.MapObject;
import com.epam.lab.developers.game.map.object.active.ActiveObject;
import com.epam.lab.developers.game.map.object.active.CoffeeMashine;
import com.epam.lab.developers.game.map.object.passive.PassiveObject;
import com.epam.lab.developers.game.map.unit.Unit;
import com.google.gson.Gson;

/**
 * Servlet implementation class CoordinateStep
 */
@WebServlet("/mouse-manage")
public class MouseManage extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public MouseManage() {
		super();
	}

	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {

	}

	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// System.out.println(request.getParameter("f_x")+" "+request.getParameter("f_y"));
		int finishXCoord, StartXCoord;
		int finishYCoord, StartYCoord;
		int finishX;
		int finishY;
		int startY = 0;
		int startX = 0;
		// int [][]map= { {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		// {1,2,2,0,0,2,1,0,3,3,1,0,0,0,0,1,3,0,0,1},
		// {1,0,0,0,0,4,1,0,0,0,1,0,0,0,0,1,0,0,0,1},
		// {1,2,0,0,0,0,1,0,0,0,1,0,0,0,0,1,3,0,0,1},
		// {1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1},
		// {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
		// {1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		// {1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1},
		// {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1},
		// {1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
		// {1,3,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,2,1},
		// {1,0,0,0,0,0,1,3,0,0,0,0,0,1,0,0,0,0,2,1},
		// {1,0,0,0,0,0,1,3,0,0,0,0,0,1,2,0,0,0,0,1},
		// {1,0,3,0,3,0,1,0,0,3,0,3,0,1,2,0,0,2,2,1},
		// {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		// };
		String message = request.getParameter("message");
		if (null != message) {
			User user = LoginData.userLogined(request);
			if (null != user) {
				Game game = DataHolder.getInstance().getGame(user);
				if (null != game) {
					GameMap gameMap = game.getMap();
					int[][] mapBinary = game.getMapBinary();
					if (message.contentEquals("right")) {
						//// TODO this is only test
						user.getTeam().setActiveUnit(user.getTeam().getUnits().get(0));
						////
						Unit activeUnit = user.getTeam().getActiveUnit();
						// чи є якийсь активний юніт
						if (activeUnit != null) {
							startY = activeUnit.getY();
							startX = activeUnit.getX();

							// TODO activeUnit.getAvailableMethods();

							finishXCoord = Integer.parseInt(request
									.getParameter("f_x"));
							finishYCoord = Integer.parseInt(request
									.getParameter("f_y"));
							finishX = finishXCoord / gameMap.getFrameWidth();
							finishY = finishYCoord / gameMap.getFrameHeight();

							// чи це активний об'єкт
							MapObject mapObject = gameMap.getMapObjects()[finishX][finishY];
							String which = "";
							String responseMessage = "";
							Set<String> menuSet=new HashSet<>();
							
							if (mapObject instanceof PassiveObject) {
								responseMessage = "hide_menu";
							} else if (mapObject instanceof ActiveObject) {
								responseMessage = "show_menu";
								System.out.println(mapObject.getClass().toString());
								System.out.println(CoffeeMashine.class.toString());
								
								menuSet.addAll(activeUnit.getAvailableMethods(mapObject.getClass().toString()));
								menuSet.addAll(((ActiveObject)mapObject).getAvailableMethods(activeUnit.getClass().toString()));
							}
							
							
							Object[] menuData = new Object[] { responseMessage,
									menuSet };
							String json = new Gson().toJson(menuData);
							response.getWriter().println(json);

							// запустити алгоритм
							// WaveAlgorithm algorithm = new WaveAlgorithm(
							// mapBinary, startY, startX, finishY, finishX);
							// String str = algorithm.Algorithm();
							// System.out.println(str + "  " + finishX + "  "
							// + finishY);
							// if (str.equals("good")) {
							//
							// activeUnit.getAvailableMethods();
							// List<Step> way = algorithm.getWay();
							// System.out.println(way);
							//
							// activeUnit.getTask().setTask("  ");
							//
							// }
						}
					}
					if (message.contentEquals("left")) {
						int p = 0;
						String whichObject = null;
						StartXCoord = Integer.parseInt(request
								.getParameter("s_x"));
						StartYCoord = Integer.parseInt(request
								.getParameter("s_y"));
						StartXCoord = StartXCoord / gameMap.getFrameWidth();
						StartYCoord = StartYCoord / gameMap.getFrameHeight();

						// checkUnit(StartXCoord, StartYCoord, game, user,
						// gameMap.getFrameWidth(), gameMap.getFrameHeight());

						for (User currentUser : game.getPlayers()) {
							for (Unit unit : user.getTeam().getUnits()) {

								if ((unit.getX() / gameMap.getFrameWidth() == StartXCoord)
										&& (unit.getY()
												/ gameMap.getFrameWidth() == StartYCoord)) {

									if (user == currentUser)
										user.getTeam().setActiveUnit(unit);

								}

							}
						}
						p = mapBinary[StartYCoord][StartXCoord];
						if (p == 0)
							whichObject = "floor";
						if (p == 1)
							whichObject = "wall";
						if (p == 2)
							whichObject = "table";
						if (p == 3)
							whichObject = "active object";
						System.out.println(StartYCoord + " " + StartXCoord);
						response.getWriter().println(
								new Gson().toJson(whichObject));
					}
				}
			}
		}
	}

}
